# -*- coding: utf-8 -*-
"""Rock VS Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqFbkiATTAoK9k5QANHmBAmplRKwxWXN

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection Data Proccessing 

"""

#loading the data set to a pandas DataFrame
sonar_data = pd.read_csv('/content/sonar data.csv',header=None)

sonar_data.head()

#Number of Rows And Columns
sonar_data.shape

sonar_data.describe() # Describe --> Statistical Measure Of the data

sonar_data[60].value_counts()

"""M --> Mine

R --> Rock
"""

sonar_data.groupby(60).mean()

# Separating data and Labels
X = sonar_data.drop(columns=60,axis = 1)
Y = sonar_data[60]

print(X)
print(Y)

"""Teraining And Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.1 , stratify = Y, random_state = 1)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)
print(Y_train)

"""Model Training --> Logistic Regression

"""

model = LogisticRegression()

#training the Logistic Regression  model With Training Data
model.fit(X_train, Y_train)

"""Model Evalutions"""

#Accuracy On Training Data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data:', training_data_accuracy)

# Accuracy On Test Data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test Data :' , test_data_accuracy)

"""Making a Predictive System"""

input_data = (0.026,0.0363,0.0136,0.0272,0.0214,0.0338,0.0655,0.14,0.1843,0.2354,0.272,0.2442,0.1665,0.0336,0.1302,0.1708,0.2177,0.3175,0.3714,0.4552,0.57,0.7397,0.8062,0.8837,0.9432,1,0.9375,0.7603,0.7123,0.8358,0.7622,0.4567,0.1715,0.1549,0.1641,0.1869,0.2655,0.1713,0.0959,0.0768,0.0847,0.2076,0.2505,0.1862,0.1439,0.147,0.0991,0.0041,0.0154,0.0116,0.0181,0.0146,0.0129,0.0047,0.0039,0.0061,0.004,0.0036,0.0061,0.0115)

# Changing the input_data to a Numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance 
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 'R'):
  print('The Object Is A Rock')
else:
  print('The Object Is A Mine')